# Problem 5

# You want to implement a queue that sorts items by a given priority and always returns the item
#  with the highest priority on each pop operation.

# Sol: The following class uses the heapq module to implement a simple priority queue:
import heapq
from typing import ItemsView

class PriorityQueue:
    def __init__(self):
        self._queue = []
        self._index = 0
    
    def push(self, item, priority):
        heapq.heappush(self._queue, (-priority, self._index, item))
        self._index += 1
    
    def pop(self):
        return heapq.heappop(self._queue)[-1]

# Here is an example of how it might be used:
class Item:
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return 'Item({!r})'.format(self.name)

q = PriorityQueue()
q.push(Item('foo'), 1)
q.push(Item('bar'), 5)
q.push(Item('spam'), 4)
q.push(Item('grok'), 1)
print(q.pop())
#Item('bar')
print(q.pop())
#Item('spam')
print(q.pop())
#Item('foo')
print(q.pop())
#Item('grok')

# Observe how the first pop() operation returned the item with the highest priority. Also
# observe how the two items with the same priority (foo and grok) were returned in the same
# order in which they were inserted into the queue.

#Discussion:  The core of this recipe concerns the use of the heapq module. The functions heapq.heappush()
# and heapq.heappop() insert and remove items from a list_queue in a way such that the first item
# in the list has the smallest priority (as discussed in Recipe 1.4).....p10

# To elaborate on that, instances of Item in the example can't be ordered. For ex:
a = Item('foo')
b = Item('bar')
# print(a<b)

# If you make (priority, item) tuples, they can be compared as long as the priorities are different. However
# ,if two tuples with equal priorities are compared, the comparison fails as before. For Ex:

a = (1, Item('foo'))
b = (5, Item('bar'))
print(a<b)

c = (1, Item('grok'))
# print(a<c)

# By introducing the extra index and making (priority, index, item) tuples, you avoid this problem entirely since
# no two tuples will ever have the same value for index (and Python never bother to compare the remaining tuple
#  values once the result of comparison can be determined):

a = (1, 0, Item('foo'))
b = (5, 1, Item('bar'))
c = (1, 2, Item('grok'))
print(a<b)
print(a<c)

# If you want to use this queue for communication between threads, you need to add appropriate locking and signaling.

"""
# Discussion is mixup with '#5_Problem.py' is shown by red dot
"""
