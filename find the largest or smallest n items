# Problem 4
# You want to make a list of the largest or smallest N items in a collection.

#sol: The heapq module has two functions--n largest() and nsmallest()--that do exactly
#      what you want. For Ex:

import heapq

nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]
print(heapq.nlargest(3, nums))  # prints  [42, 37, 23]
print(heapq.nsmallest(3, nums))  # prints [-4, 1, 2]

# Both functions also accept a key parameter that allows them to be used with more complicated data 
#  structures. For ex:

portfolio = [
    {'name': 'IBM', 'shares': 100, 'price': 91.1},
    {'name': 'AAPL', 'shares': 50, 'price': 543.22},
    {'name': 'FB', 'shares': 200, 'price': 21.09},
    {'name': 'HPQ', 'shares': 35, 'price': 31.75},
    {'name': 'YHOO', 'shares': 45, 'price': 16.35},
    {'name': 'ACME', 'shares': 75, 'price': 115.65},
]

cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])
expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])

"""
Discussion.py 
# If you are looking for the N smallest or largest items and n is small compared to the overall
# size of the collection, these functions provide superior performace. Underneath the covers, they
# work by first converting the data into a list where items are orbered as a heap. For Ex:

nums = [1, 8, 2, 23, 7, -4, 18, 23,42, 37, 2]
import heapq
heap = list(nums)
heapq.heapify(heap)
print(heap)
# [-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]

# The most important feature of a heap is that heap[0] is always the smallest item. Moreover, 
# subsequent items can be easily found using the heapq.heappop() method, which pops off the first
# items and replaces it with the next smallest item (an operation that requires O(log N) operations
# where N is the size of the heap). For ex, to find the three smallest items, you would do this:

print(heapq.heappop(heap))
# -4
print(heapq.heappop(heap))
# 1
print(heapq.heappop(heap))
# 2
"""
