# Number:- Numbers are used quite often in programming to keep score in games,
# represent data in visualizations, store information in web applications, and so on.

# Integers:- You can add(+), subtract (-), multiply (*) and divide (/) intergers in Python.
""" In terminal session Python simply returns the result of the operation .

>>> 2+3
5
>>> 3-2
1
>>> 2*3
6
>>> 3/2
1.5

Python uses two multiplication symbols to represent exponents:

>>> 3**2
9
>>> 3**3
27
>>> 10**6
1000000

You can also use parentheses to modify the order of operations so Python
can  evaluate your expression in the order you specify. For ex:-

>>> 2 + 3*4
14
>>> (2+3) * 4
20

"""

# Floats:- Python calls any number with a decimal point a float.
"""
Simply enter the numbers you want to use, and Python will most likely do what you expect:

>>> 0.1 + 0.1
0.2
>>> 0.2
0.2
>>> 0.1 + 0.1
0.2
>>> 0.2 + 0.2
0.4
>>> 2 * 0.1
0.2
>>> 2 * 0.2
0.4

But be aware that you can sometimes get an arbitary number of decimal places in your answer:

>>> 0.2 +0.1
0.30000000000000004
>>> 3 * 0.1
0.30000000000000004

Just ignore the extra decimal places for now, you'll learn ways to with the
extra places when you need to in the projects in Part II.

"""

# Interger and Floats:- 
""" When you divide any two numbers, even if they are intergers that
    result in a whole number, you'll always get a float:

>>> 4/2
2.0

If you mix an interger and a float in any other operation, you'll get a 
float as well:

>>> 1 + 2.0
3.0
>>> 2 * 3.0
6.0
>>> 3.0 ** 2
9.0

Python defaults to a float in any operation that user a float, even if the output
is whole number.
"""

# Underscores In Numbers:
"""
When you're writing long numbers, you can group digits using underscores
to make large number more redable:

>>> universe_age = 14_000_000_000

When you print a number that was defined using underscores, Python prints
only the digits:

>>> print(universe_age)
14000000000

Python ignores the underscores when storing these kinds of values.
"""

# Multiple Assignment
"""
You can assign values tomore than one variable using just a single line.
For example, here's how you can initialize the varibles x, y, and z and zero:

>>> x, y, z = 0, 0, 0
>>> print(x, y, z)
0 0 0
"""

# Constants: A constant is like a varible whose value stays the same throughout
#            the life of a program. Python doesn't have built-in  contant types,
#            but Python programmers use all capital letters to indicate a variable should
#            be treated as a constant and never be changed:

MAX_CONSTANT = 500

# When you want to treat a variable as a constant in your code, make the name
# of the varible all capital letters.
